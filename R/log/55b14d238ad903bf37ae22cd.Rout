
R version 3.0.2 (2013-09-25) -- "Frisbee Sailing"
Copyright (C) 2013 The R Foundation for Statistical Computing
Platform: x86_64-redhat-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ###########################################################################################################################				
> #################################### Run_RROI:  Run Run_0, Run_1, Run_2 ###################################################
> ###########################################################################################################################				
> 
> #sudo R CMD BATCH --no-save --no-restore  '--args 1401313164_80.cfg' /var/www/deniX/webroot/ROI/algorithms/Run_RROI.R
> 
> 
> 
> ###########################################################################################################################				
> ################################ Load JSON Data From JSON Input file ######################################################				
> ###########################################################################################################################	
> 
> jsonIOFolder  <- "/home/albert/ROI_V2/20150723/ROIServer/R/"
> rCodeFolder   <- "/home/albert/ROI_V2/20150723/ROIServer/R/algorithms"
> rOutputFolder <- "/home/albert/ROI_V2/20150723/ROIServer/R/output"
> 
> 
> 
> options(scipen=999) #positive towards fixed and negative towards scientific notation
> Sys.setenv(TZ='America/Los_Angeles')  #Set time zone as Pacific time
> Sys.timezone()   #PDT
[1] "America/Los_Angeles"
> 
> setwd(".")
> curCallerFolder <- getwd()
> setwd(rCodeFolder)
> 
>   
> #folder and file pre-processing
>   
> require.package<-function(pckg)
+ {
+ package.installed<-try(require(pckg, character.only =TRUE))
+ if (!package.installed) {
+ cat(paste("Installing", pckg,  "from CRAN\n", sep=" "))
+ install.packages(pckg,  repos = "http://cran.r-project.org")
+ require(pckg, character.only =TRUE)
+ }#if
+ }#require.package
> 
> require.package("rjson")
Loading required package: rjson
> require.package("lubridate")
Loading required package: lubridate
> 
> library(rjson)
> args=(commandArgs(TRUE))
> if(length(args)==0){
+     #supply default values
+      inJsonFile <- "d2.cfg"
+     #print("no args")
+   } else {
+    inJsonFile <- args[[1]]
+ }    
> inJsonFileFullPath <- paste(jsonIOFolder,"input/",inJsonFile,sep="")
> inJsonData <- fromJSON(paste(readLines(inJsonFileFullPath), collapse="")) 
Warning message:
In readLines(inJsonFileFullPath) :
  incomplete final line found on '/home/albert/ROI_V2/20150723/ROIServer/R/input/55b14d238ad903bf37ae22cd.json'
> outJsonFileFullPath <- paste(jsonIOFolder,"output/",inJsonFile,sep="")
> inJsonData$Algorithm
[1] 3
> 
> 
> 
> 
> ###########################################################################################################################				
> ################################ Define Beg_Date, End_Date and Other Parameters ###########################################				
> ###########################################################################################################################	
> 
> Inputfile <- "RROI_input_data.csv"
> Estfile   <- "RROI_coefficient_table.csv"
> Fstfile   <- "RROI_elasticity_table.csv"
> 
> LTAMTA <- ifelse(toupper(inJsonData$lmTouch) == "LAST TOUCH", "_LTA", "_MTA")
> nMon <- as.numeric(inJsonData$PlanMonths)
> 
> Date     <- "Date"
> Beg_Date <- paste0(inJsonData$StartingTime, "-01")
> End_Date <- as.character((seq(as.Date(Beg_Date), length=nMon+1, by="month") - 1)[nMon+1])
> 
> #if (!substr(inJsonData$EndingTime, 1, 4) %in% c("2012", "2016", "2020") & substr(inJsonData$EndingTime, 6, 7)=="02") End_Date  <- paste0(inJsonData$EndingTime,  "-28")
> #if ( substr(inJsonData$EndingTime, 1, 4) %in% c("2012", "2016", "2020") & substr(inJsonData$EndingTime, 6, 7)=="02") End_Date  <- paste0(inJsonData$EndingTime,  "-29") #leap year
> #if ( substr(inJsonData$EndingTime, 6, 7) %in% c("04", "06", "09", "11"))                                             End_Date  <- paste0(inJsonData$EndingTime,  "-30")
> #if ( substr(inJsonData$EndingTime, 6, 7) %in% c("01", "03", "05", "07", "08", "10", "12"))                           End_Date  <- paste0(inJsonData$EndingTime,  "-31")
> 
> Beg_Date_LastYear <- paste0(year(as.Date(Beg_Date))-1, "-", month(as.Date(Beg_Date)), "-01")
> End_Date_LastYear <- as.character((seq(as.Date(Beg_Date_LastYear ), length=nMon+1, by="month") - 1)[nMon+1])
> 
> 
> 
> DATE <- as.Date(seq(from=as.Date(Beg_Date),to=as.Date(End_Date),by='day'))
> cmonth <- format(DATE,'%b')
> MONTH <- factor(cmonth,levels=unique(cmonth),ordered=TRUE)  #Jan, Feb, Mar, ...
> dayOfMonth =table(MONTH)	
> ndays = sum(dayOfMonth)
> 
> 
> DATE_LastYear <- as.Date(seq(from=as.Date(Beg_Date_LastYear),to=as.Date(End_Date_LastYear),by='day'))
> cmonth_LastYear <- format(DATE_LastYear,'%b')
> MONTH_LastYear <- factor(cmonth_LastYear,levels=unique(cmonth_LastYear),ordered=TRUE)  #Jan, Feb, Mar, ...
> dayOfMonth_LastYear =table(MONTH_LastYear)	
> ndays_LastYear = sum(dayOfMonth_LastYear)
> 
> ####### SEMCard SEMPBook SEMOther SEMBrand  Display   FB   Affiliate Partners DM  ###########
> ChannelSpend      <- c("SEMCard", "SEMPBook", "SEMOther", "SEMBrand", "Display",  "FB",  "Affiliate", "Partners")    
> ChannelOut        <- c("semC", "semP", "semO", "semB", "dis",  "soc",  "aff", "par")   
> ChannelOutTot     <- c("semC", "semP", "semO", "semB", "dis",  "soc",  "aff", "par", "tot")   
> ChannelSpend2     <- c("Display", "SEMBrand", "SEMCard", "SEMPBook", "SEMOther",  "Partners", "Affiliate", "FB") 
> OptChannel        <- c("dis", "semB", "semC", "semP", "semO",  "par",  "aff", "soc")
> OptChannelinChannelOut <- match(OptChannel, ChannelOut) # 5 4 1 2 3 8 7 6 
> ChannelOutinOptChannel <- match(ChannelOut, OptChannel) # 3 4 5 2 1 8 7 6 
> SRChannel         <- c("sem", "semC", "semP", "semO", "semB", "dis",  "soc",  "aff", "par", "tot")  
> PRChannel         <- c("sem", "dis",  "soc",  "aff", "par", "tot") 
> ASChannel         <- SRChannel
> ARChannel         <- PRChannel
> SF_cha            <- c("1.0", "1.0",  "1.0",   "1.0",    "1.0",    "1.0",  "1.0",   "1.0")
> RevRange          <- c(0.06, 0.11, 0.10, 0.10, 0.06, 0.08) #PR variance by LTA/MTA, planmonth  c(-0.0121, -0.0135, -0.0844, -0.0604, 0.0199, 0.0102)
>  
> 
> if (!exists("roDgt"))  roDgt <- 0
> 
> print(inJsonData[1:8])
$AlgDuration
[1] "6.876079 mins"

$AlgEndingTime
[1] "2015-07-14 21:56:12"

$AlgStartingTime
[1] "2015-07-14 21:49:19"

$Algorithm
[1] 3

$Brand
[1] "Shutterfly"

$EndingTime
[1] "2013-11"

$PlanMonths
[1] "1"

$Spend
[1] "6420305"

> a<-cbind(LB=as.numeric(inJsonData[ paste0(ChannelOut, 'LB' )]),as.numeric(inJsonData[ paste0(ChannelOut, 'Min' )]), as.numeric(inJsonData[ paste0(ChannelOut, 'Max' )]), as.numeric(inJsonData[ paste0(ChannelOut, 'UB' )]))
> colnames(a) <- c('LB', 'Min', 'Max', 'UB')
> print(a)
         LB     Min      Max       UB
[1,] 343858 1661220 10000000 10762858
[2,]  72782  244669   700000   774325
[3,]  59297  268576  1000000  1495743
[4,]      0  279865   379865  2221996
[5,] 320915 1343700  3000000  4068865
[6,]  59474  437474  1000000  1167684
[7,]  43930  197934  1000000  1087494
[8,] 286440  986866   986866  4818540
> print(colSums(a))
      LB      Min      Max       UB 
 1186696  5420304 18066731 26397505 
> 
> ###########################################################################################################################				
> ############################################## Run Run_0, Run_1, Run_2 ####################################################
> ###########################################################################################################################				
> 
> if (inJsonData$Algorithm == 0 || inJsonData$Algorithm==1) {
+ source("RROI_Run_0.R")
+ } else if (inJsonData$Algorithm==2) {
+ source("RROI_Run_1.R")
+ } else if (inJsonData$Algorithm==3) {
+ source("RROI_Run_2.R")
+ } else {
+ } # if inJsonData$Algorithm
############# Optimization Starts #################
Loading required package: Rsolnp
Loading required package: truncnorm
Loading required package: parallel
Loading required package: caTools
Loading required package: compiler
Loading required package: nloptr
[1] "The optimal solution achieved."
[1] 10125936
MONTH
Nov 
 30 
[1] 30  8
[1] 30  8
[1]  4 30
[1] 240
[1] 267
[1] "Total Spend Last Year: $5,281,319"
[1] "Total Spend This Year: $5,420,305"
[1] "Total Budget: $6,420,305"
[1] "Total Opt Spend: $6,418,661"
[1] "Total Revenue Last Year: $91,368,459"
[1] "Total Revenue This Year: $89,355,498"
[1] "Total Opt Revenue: $135,220,901"
[1] "Total Revenue ROI: 51.33%"
  semSR  semCSR  semPSR  semOSR  semBSR   disSR   socSR   affSR   parSR   totSR 
3306939 2381039  244769  269769  411363 1344462  439686  340847  986726 6420305 
  semSR  semCSR  semPSR  semOSR  semBSR   disSR   socSR   affSR   parSR   totSR 
3294475 2396690  246378  271542  379865 1353300  442576  343088  986866 6420305 
############# Optimization Ends #################
############# Forecast Starts #################
Note: no visible binding for global variable 'SR' 
Note: no visible binding for global variable 'SR' 
Note: no visible binding for global variable 'SR' 
[1] 0.1022 0.5092 0.8704 0.1779 0.7393
[1] 0.1022 0.5092 0.8704 0.1779 0.7393
[1] 22020260
[1] 8273065
[1] 2558813
[1] 3818426
[1] 5603723
############# Forecast Ends #################
[1] "Total AR: $42,274,286"
[1] "Total AS: $6,420,305"
[1] "Projected ROI: 558%"
> 
>   
> setwd(curCallerFolder)
> 
> proc.time()
   user  system elapsed 
227.500   0.116 227.978 
