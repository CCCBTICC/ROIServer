
R version 3.0.2 (2013-09-25) -- "Frisbee Sailing"
Copyright (C) 2013 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ###########################################################################################################################				
> #################################### Run_RROI:  Run Run_0, Run_1, Run_2 ###################################################
> ###########################################################################################################################				
> 
> #sudo R CMD BATCH --no-save --no-restore  '--args 1401313164_80.cfg' /var/www/deniX/webroot/ROI/algorithms/Run_RROI.R
> 
> 
> 
> ###########################################################################################################################				
> ################################ Load JSON Data From JSON Input file ######################################################				
> ###########################################################################################################################	
> 
> jsonIOFolder  <- "/home/daviddong/ROI_V2/20150731/ROIServer/R/"
> rCodeFolder   <- "/home/daviddong/ROI_V2/20150731/ROIServer/R/algorithms"
> rOutputFolder <- "/home/daviddong/ROI_V2/20150731/ROIServer/R/output"
> 
> 
> 
> options(scipen=999) #positive towards fixed and negative towards scientific notation
> Sys.setenv(TZ='America/Los_Angeles')  #Set time zone as Pacific time
> Sys.timezone()   #PDT
[1] "America/Los_Angeles"
> 
> setwd(".")
> curCallerFolder <- getwd()
> setwd(rCodeFolder)
> 
>   
> #folder and file pre-processing
>   
> require.package<-function(pckg)
+ {
+ package.installed<-try(require(pckg, character.only =TRUE))
+ if (!package.installed) {
+ cat(paste("Installing", pckg,  "from CRAN\n", sep=" "))
+ install.packages(pckg,  repos = "http://cran.r-project.org")
+ require(pckg, character.only =TRUE)
+ }#if
+ }#require.package
> 
> require.package("rjson")
Loading required package: rjson
> require.package("lubridate")
Loading required package: lubridate
> 
> library(rjson)
> args=(commandArgs(TRUE))
> if(length(args)==0){
+     #supply default values
+      inJsonFile <- "d2.cfg"
+     #print("no args")
+   } else {
+    inJsonFile <- args[[1]]
+ }    
> inJsonFileFullPath <- paste(jsonIOFolder,"input/",inJsonFile,sep="")
> inJsonData <- fromJSON(paste(readLines(inJsonFileFullPath), collapse="")) 
Warning message:
In readLines(inJsonFileFullPath) :
  incomplete final line found on '/home/daviddong/ROI_V2/20150731/ROIServer/R/input/55c2a4116cf11c270edfa554.json'
> outJsonFileFullPath <- paste(jsonIOFolder,"output/",inJsonFile,sep="")
> inJsonData$Algorithm
[1] 1
> 
> 
> 
> 
> ###########################################################################################################################				
> ################################ Define Beg_Date, End_Date and Other Parameters ###########################################				
> ###########################################################################################################################	
> 
> Inputfile <- "RROI_input_data.csv"
> Estfile   <- "RROI_coefficient_table.csv"
> Fstfile   <- "RROI_elasticity_table.csv"
> 
> LTAMTA <- ifelse(toupper(inJsonData$lmTouch) == "LAST TOUCH", "_LTA", "_MTA")
> nMon <- as.numeric(inJsonData$PlanMonths)
> 
> Date     <- "Date"
> Beg_Date <- paste0(inJsonData$StartingTime, "-01")
> End_Date <- as.character((seq(as.Date(Beg_Date), length=nMon+1, by="month") - 1)[nMon+1])
> 
> #if (!substr(inJsonData$EndingTime, 1, 4) %in% c("2012", "2016", "2020") & substr(inJsonData$EndingTime, 6, 7)=="02") End_Date  <- paste0(inJsonData$EndingTime,  "-28")
> #if ( substr(inJsonData$EndingTime, 1, 4) %in% c("2012", "2016", "2020") & substr(inJsonData$EndingTime, 6, 7)=="02") End_Date  <- paste0(inJsonData$EndingTime,  "-29") #leap year
> #if ( substr(inJsonData$EndingTime, 6, 7) %in% c("04", "06", "09", "11"))                                             End_Date  <- paste0(inJsonData$EndingTime,  "-30")
> #if ( substr(inJsonData$EndingTime, 6, 7) %in% c("01", "03", "05", "07", "08", "10", "12"))                           End_Date  <- paste0(inJsonData$EndingTime,  "-31")
> 
> Beg_Date_LastYear <- paste0(year(as.Date(Beg_Date))-1, "-", month(as.Date(Beg_Date)), "-01")
> End_Date_LastYear <- as.character((seq(as.Date(Beg_Date_LastYear ), length=nMon+1, by="month") - 1)[nMon+1])
> 
> 
> 
> DATE <- as.Date(seq(from=as.Date(Beg_Date),to=as.Date(End_Date),by='day'))
> cmonth <- format(DATE,'%b')
> MONTH <- factor(cmonth,levels=unique(cmonth),ordered=TRUE)  #Jan, Feb, Mar, ...
> dayOfMonth =table(MONTH)	
> ndays = sum(dayOfMonth)
> 
> 
> DATE_LastYear <- as.Date(seq(from=as.Date(Beg_Date_LastYear),to=as.Date(End_Date_LastYear),by='day'))
> cmonth_LastYear <- format(DATE_LastYear,'%b')
> MONTH_LastYear <- factor(cmonth_LastYear,levels=unique(cmonth_LastYear),ordered=TRUE)  #Jan, Feb, Mar, ...
> dayOfMonth_LastYear =table(MONTH_LastYear)	
> ndays_LastYear = sum(dayOfMonth_LastYear)
> 
> ####### SEMCard SEMPBook SEMOther SEMBrand  Display   FB   Affiliate Partners DM  ###########
> ChannelSpend      <- c("SEMCard", "SEMPBook", "SEMOther", "SEMBrand", "Display",  "FB",  "Affiliate", "Partners")    
> ChannelOut        <- c("semC", "semP", "semO", "semB", "dis",  "soc",  "aff", "par")   
> ChannelOutTot     <- c("semC", "semP", "semO", "semB", "dis",  "soc",  "aff", "par", "tot")   
> ChannelSpend2     <- c("Display", "SEMBrand", "SEMCard", "SEMPBook", "SEMOther",  "Partners", "Affiliate", "FB") 
> OptChannel        <- c("dis", "semB", "semC", "semP", "semO",  "par",  "aff", "soc")
> OptChannelinChannelOut <- match(OptChannel, ChannelOut) # 5 4 1 2 3 8 7 6 
> ChannelOutinOptChannel <- match(ChannelOut, OptChannel) # 3 4 5 2 1 8 7 6 
> SRChannel         <- c("sem", "semC", "semP", "semO", "semB", "dis",  "soc",  "aff", "par", "tot")  
> PRChannel         <- c("sem", "dis",  "soc",  "aff", "par", "tot") 
> ASChannel         <- SRChannel
> ARChannel         <- PRChannel
> SF_cha            <- c("1.0", "1.0",  "1.0",   "1.0",    "1.0",    "1.0",  "1.0",   "1.0")
> RevRange          <- c(0.06, 0.11, 0.10, 0.10, 0.06, 0.08) #PR variance by LTA/MTA, planmonth  c(-0.0121, -0.0135, -0.0844, -0.0604, 0.0199, 0.0102)
>  
> 
> if (!exists("roDgt"))  roDgt <- 0
> 
> print(inJsonData[1:8])
$UserName
[1] "user1"

$Brand
[1] "Shutterfly"

$lmTouch
[1] "Multi-Touch"

$StartingTime
[1] "2015-06"

$EndingTime
[1] "2015-06"

$Spend
NULL

$PlanMonths
[1] 1

$Algorithm
[1] 1

> a<-cbind(LB=as.numeric(inJsonData[ paste0(ChannelOut, 'LB' )]),as.numeric(inJsonData[ paste0(ChannelOut, 'Min' )]), as.numeric(inJsonData[ paste0(ChannelOut, 'Max' )]), as.numeric(inJsonData[ paste0(ChannelOut, 'UB' )]))
> colnames(a) <- c('LB', 'Min', 'Max', 'UB')
> print(a)
     LB Min Max UB
[1,] NA  NA  NA NA
[2,] NA  NA  NA NA
[3,] NA  NA  NA NA
[4,] NA  NA  NA NA
[5,] NA  NA  NA NA
[6,] NA  NA  NA NA
[7,] NA  NA  NA NA
[8,] NA  NA  NA NA
> print(colSums(a))
 LB Min Max  UB 
 NA  NA  NA  NA 
> 
> ###########################################################################################################################				
> ############################################## Run Run_0, Run_1, Run_2 ####################################################
> ###########################################################################################################################				
> 
> if (inJsonData$Algorithm == 0 || inJsonData$Algorithm==1) {
+ source("RROI_Run_0.R")
+ } else if (inJsonData$Algorithm==2) {
+ source("RROI_Run_1.R")
+ } else if (inJsonData$Algorithm==3) {
+ source("RROI_Run_2.R")
+ } else {
+ } # if inJsonData$Algorithm
[1] "sum of LB: $705,525"
[1] "sum of UB: $8,228,940"
           LB Actuala_LastYear Actual_ThisYear      UB
semCLB  85740           253852              NA  832320
semPLB  53145           147939              NA  403620
semOLB  24060            83342              NA  297180
semBLB  53145           147938              NA  831960
disLB  165390           465208              NA 1533180
socLB   31230           114312              NA  502140
affLB   20340            79610              NA  235500
parLB  272475           851106              NA 3593040
> 
>   
> setwd(curCallerFolder)
> 
> proc.time()
   user  system elapsed 
  0.879   0.140   4.367 
