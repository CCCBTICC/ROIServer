
R version 3.0.2 (2013-09-25) -- "Frisbee Sailing"
Copyright (C) 2013 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ###########################################################################################################################				
> #################################### Run_RROI:  Run Run_0, Run_1, Run_2 ###################################################
> ###########################################################################################################################				
> 
> #sudo R CMD BATCH --no-save --no-restore  '--args 1401313164_80.cfg' /var/www/deniX/webroot/ROI/algorithms/Run_RROI.R
> 
> 
> 
> ###########################################################################################################################				
> ################################ Load JSON Data From JSON Input file ######################################################				
> ###########################################################################################################################	
> 
> jsonIOFolder  <- "/home/daviddong/ROI_V2/20150731/ROIServer/R/"
> rCodeFolder   <- "/home/daviddong/ROI_V2/20150731/ROIServer/R/algorithms"
> rOutputFolder <- "/home/daviddong/ROI_V2/20150731/ROIServer/R/output"
> 
> 
> 
> options(scipen=999) #positive towards fixed and negative towards scientific notation
> Sys.setenv(TZ='America/Los_Angeles')  #Set time zone as Pacific time
> Sys.timezone()   #PDT
[1] "America/Los_Angeles"
> 
> setwd(".")
> curCallerFolder <- getwd()
> setwd(rCodeFolder)
> 
>   
> #folder and file pre-processing
>   
> require.package<-function(pckg)
+ {
+ package.installed<-try(require(pckg, character.only =TRUE))
+ if (!package.installed) {
+ cat(paste("Installing", pckg,  "from CRAN\n", sep=" "))
+ install.packages(pckg,  repos = "http://cran.r-project.org")
+ require(pckg, character.only =TRUE)
+ }#if
+ }#require.package
> 
> require.package("rjson")
Loading required package: rjson
> require.package("lubridate")
Loading required package: lubridate
> 
> library(rjson)
> args=(commandArgs(TRUE))
> if(length(args)==0){
+     #supply default values
+      inJsonFile <- "d2.cfg"
+     #print("no args")
+   } else {
+    inJsonFile <- args[[1]]
+ }    
> inJsonFileFullPath <- paste(jsonIOFolder,"input/",inJsonFile,sep="")
> inJsonData <- fromJSON(paste(readLines(inJsonFileFullPath), collapse="")) 
Warning message:
In readLines(inJsonFileFullPath) :
  incomplete final line found on '/home/daviddong/ROI_V2/20150731/ROIServer/R/input/55c01fb41b684cad13ff3dda.json'
> outJsonFileFullPath <- paste(jsonIOFolder,"output/",inJsonFile,sep="")
> inJsonData$Algorithm
[1] 2
> 
> 
> 
> 
> ###########################################################################################################################				
> ################################ Define Beg_Date, End_Date and Other Parameters ###########################################				
> ###########################################################################################################################	
> 
> Inputfile <- "RROI_input_data.csv"
> Estfile   <- "RROI_coefficient_table.csv"
> Fstfile   <- "RROI_elasticity_table.csv"
> 
> LTAMTA <- ifelse(toupper(inJsonData$lmTouch) == "LAST TOUCH", "_LTA", "_MTA")
> nMon <- as.numeric(inJsonData$PlanMonths)
> 
> Date     <- "Date"
> Beg_Date <- paste0(inJsonData$StartingTime, "-01")
> End_Date <- as.character((seq(as.Date(Beg_Date), length=nMon+1, by="month") - 1)[nMon+1])
> 
> #if (!substr(inJsonData$EndingTime, 1, 4) %in% c("2012", "2016", "2020") & substr(inJsonData$EndingTime, 6, 7)=="02") End_Date  <- paste0(inJsonData$EndingTime,  "-28")
> #if ( substr(inJsonData$EndingTime, 1, 4) %in% c("2012", "2016", "2020") & substr(inJsonData$EndingTime, 6, 7)=="02") End_Date  <- paste0(inJsonData$EndingTime,  "-29") #leap year
> #if ( substr(inJsonData$EndingTime, 6, 7) %in% c("04", "06", "09", "11"))                                             End_Date  <- paste0(inJsonData$EndingTime,  "-30")
> #if ( substr(inJsonData$EndingTime, 6, 7) %in% c("01", "03", "05", "07", "08", "10", "12"))                           End_Date  <- paste0(inJsonData$EndingTime,  "-31")
> 
> Beg_Date_LastYear <- paste0(year(as.Date(Beg_Date))-1, "-", month(as.Date(Beg_Date)), "-01")
> End_Date_LastYear <- as.character((seq(as.Date(Beg_Date_LastYear ), length=nMon+1, by="month") - 1)[nMon+1])
> 
> 
> 
> DATE <- as.Date(seq(from=as.Date(Beg_Date),to=as.Date(End_Date),by='day'))
> cmonth <- format(DATE,'%b')
> MONTH <- factor(cmonth,levels=unique(cmonth),ordered=TRUE)  #Jan, Feb, Mar, ...
> dayOfMonth =table(MONTH)	
> ndays = sum(dayOfMonth)
> 
> 
> DATE_LastYear <- as.Date(seq(from=as.Date(Beg_Date_LastYear),to=as.Date(End_Date_LastYear),by='day'))
> cmonth_LastYear <- format(DATE_LastYear,'%b')
> MONTH_LastYear <- factor(cmonth_LastYear,levels=unique(cmonth_LastYear),ordered=TRUE)  #Jan, Feb, Mar, ...
> dayOfMonth_LastYear =table(MONTH_LastYear)	
> ndays_LastYear = sum(dayOfMonth_LastYear)
> 
> ####### SEMCard SEMPBook SEMOther SEMBrand  Display   FB   Affiliate Partners DM  ###########
> ChannelSpend      <- c("SEMCard", "SEMPBook", "SEMOther", "SEMBrand", "Display",  "FB",  "Affiliate", "Partners")    
> ChannelOut        <- c("semC", "semP", "semO", "semB", "dis",  "soc",  "aff", "par")   
> ChannelOutTot     <- c("semC", "semP", "semO", "semB", "dis",  "soc",  "aff", "par", "tot")   
> ChannelSpend2     <- c("Display", "SEMBrand", "SEMCard", "SEMPBook", "SEMOther",  "Partners", "Affiliate", "FB") 
> OptChannel        <- c("dis", "semB", "semC", "semP", "semO",  "par",  "aff", "soc")
> OptChannelinChannelOut <- match(OptChannel, ChannelOut) # 5 4 1 2 3 8 7 6 
> ChannelOutinOptChannel <- match(ChannelOut, OptChannel) # 3 4 5 2 1 8 7 6 
> SRChannel         <- c("sem", "semC", "semP", "semO", "semB", "dis",  "soc",  "aff", "par", "tot")  
> PRChannel         <- c("sem", "dis",  "soc",  "aff", "par", "tot") 
> ASChannel         <- SRChannel
> ARChannel         <- PRChannel
> SF_cha            <- c("1.0", "1.0",  "1.0",   "1.0",    "1.0",    "1.0",  "1.0",   "1.0")
> RevRange          <- c(0.06, 0.11, 0.10, 0.10, 0.06, 0.08) #PR variance by LTA/MTA, planmonth  c(-0.0121, -0.0135, -0.0844, -0.0604, 0.0199, 0.0102)
>  
> 
> if (!exists("roDgt"))  roDgt <- 0
> 
> print(inJsonData[1:8])
$UserName
[1] "user1"

$Brand
[1] "Shutterfly"

$Spend
[1] "5000000"

$StartingTime
[1] "2015-06"

$PlanMonths
[1] "1"

$EndingTime
[1] "2015-06"

$lmTouch
[1] "Last Touch"

$Algorithm
[1] 2

> a<-cbind(LB=as.numeric(inJsonData[ paste0(ChannelOut, 'LB' )]),as.numeric(inJsonData[ paste0(ChannelOut, 'Min' )]), as.numeric(inJsonData[ paste0(ChannelOut, 'Max' )]), as.numeric(inJsonData[ paste0(ChannelOut, 'UB' )]))
> colnames(a) <- c('LB', 'Min', 'Max', 'UB')
> print(a)
         LB    Min     Max      UB
[1,]  85740  85740  832320  832320
[2,]  53145  53145  403620  403620
[3,]  24060  24060  297180  297180
[4,]  53145  53145  831960  831960
[5,] 165390 165390 1533180 1533180
[6,]  31230  31230  502140  502140
[7,]  20340  20340  235500  235500
[8,] 272475 272475 3593040 3593040
> print(colSums(a))
     LB     Min     Max      UB 
 705525  705525 8228940 8228940 
> 
> ###########################################################################################################################				
> ############################################## Run Run_0, Run_1, Run_2 ####################################################
> ###########################################################################################################################				
> 
> if (inJsonData$Algorithm == 0 || inJsonData$Algorithm==1) {
+ source("RROI_Run_0.R")
+ } else if (inJsonData$Algorithm==2) {
+ source("RROI_Run_1.R")
+ } else if (inJsonData$Algorithm==3) {
+ source("RROI_Run_2.R")
+ } else {
+ } # if inJsonData$Algorithm
############# Optimization Starts #################
Loading required package: Rsolnp
Loading required package: truncnorm
Loading required package: parallel
Loading required package: caTools
Loading required package: compiler
Loading required package: nloptr
[1] "The optimization does not converge!!! The solution is not reliable."
[1] 214288
MONTH
Jun 
 30 
[1] 30  8
[1] 30  8
[1] 1 1
[1] 240
[1] 241
[1] "Total Spend Last Year: $2,143,307"
[1] "Total Spend This Year: $NA"
[1] "Total Budget: $5,000,000"
[1] "Total Opt Spend: $5,000,000"
[1] "Total Revenue Last Year: $31,271,527"
[1] "Total Revenue This Year: $NA"
[1] "Total Opt Revenue: $93,250,052"
[1] "Total Revenue ROI: Inf%"
  semSR  semCSR  semPSR  semOSR  semBSR   disSR   socSR   affSR   parSR   totSR 
1865156  812413  139527   81257  831960 1013250   68454  232774 1820366 5000000 
  semSR  semCSR  semPSR  semOSR  semBSR   disSR   socSR   affSR   parSR   totSR 
1865157  812413  139527   81257  831960 1013250   68454  232774 1820366 5000000 
############# Optimization Ends #################
############# Forecast Starts #################
Note: no visible binding for global variable 'AS' 
Note: no visible binding for global variable 'AS' 
Note: no visible binding for global variable 'AS' 
[1] 0.15121850 0.41390928 0.69094703 0.08420649 0.56500610
[1] 0.15121850 0.41390928 0.69094703 0.08420649 0.56500610
[1] 5762457
[1] 2747774
[1] 633159.8
[1] 1022757
[1] 4957363
############# Forecast Ends #################
[1] "Total PR: $15,123,510"
[1] "Total SR: $5,000,000"
[1] "Projected ROI: 202%"
> 
>   
> setwd(curCallerFolder)
> 
> proc.time()
   user  system elapsed 
146.574   6.950 344.991 
