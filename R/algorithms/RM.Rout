
R version 3.0.2 (2013-09-25) -- "Frisbee Sailing"
Copyright (C) 2013 The R Foundation for Statistical Computing
Platform: x86_64-w64-mingw32/x64 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ###########################################################################################################################				
> #################################### Run_RROI:  Run Run_0, Run_1, Run_2 ###################################################
> ###########################################################################################################################				
> 
> #sudo R CMD BATCH --no-save --no-restore  '--args 1401313164_80.cfg' /var/www/deniX/webroot/ROI/algorithms/Run_RROI.R
> 
> 
> 
> ###########################################################################################################################				
> ################################ Load JSON Data From JSON Input file ######################################################				
> ###########################################################################################################################	
> 
> jsonIOFolder  <- "C:/Users/Administrator/Desktop/ccc/ROIServer/R/"
> rCodeFolder   <- "C:/Users/Administrator/Desktop/ccc/ROIServer/R/algorithms"
> rOutputFolder <- "C:/Users/Administrator/Desktop/ccc/ROIServer/R/output"
> 
> 
> 
> options(scipen=999) #positive towards fixed and negative towards scientific notation
> Sys.setenv(TZ='America/Los_Angeles')  #Set time zone as Pacific time
> Sys.timezone()   #PDT
[1] "PDT"
> 
> setwd(".")
> curCallerFolder <- getwd()
> setwd(rCodeFolder)
> 
>   
> #folder and file pre-processing
>   
> require.package<-function(pckg)
+ {
+ package.installed<-try(require(pckg, character.only =TRUE))
+ if (!package.installed) {
+ cat(paste("Installing", pckg,  "from CRAN\n", sep=" "))
+ install.packages(pckg,  repos = "http://cran.r-project.org")
+ require(pckg, character.only =TRUE)
+ }#if
+ }#require.package
> 
> require.package("rjson")
Loading required package: rjson
Warning message:
package 'rjson' was built under R version 3.0.3 
> require.package("lubridate")
Loading required package: lubridate
Warning message:
package 'lubridate' was built under R version 3.0.3 
> 
> library(rjson)
> args=(commandArgs(TRUE))
> if(length(args)==0){
+     #supply default values
+      inJsonFile <- "d2.cfg"
+     #print("no args")
+   } else {
+    inJsonFile <- args[[1]]
+ }    
> inJsonFileFullPath <- paste(jsonIOFolder,"input/",inJsonFile,sep="")
> inJsonData <- fromJSON(paste(readLines(inJsonFileFullPath), collapse="")) 
Warning message:
In readLines(inJsonFileFullPath) :
  incomplete final line found on 'C:/Users/Administrator/Desktop/ccc/ROIServer/R/input/input_temp_run.json'
> outJsonFileFullPath <- paste(jsonIOFolder,"output/",inJsonFile,sep="")
> inJsonData$Algorithm
[1] 2
> 
> 
> 
> 
> ###########################################################################################################################				
> ################################ Define Beg_Date, End_Date and Other Parameters ###########################################				
> ###########################################################################################################################	
> 
> Inputfile <- "RROI_input_data.csv"
> Estfile   <- "RROI_coefficient_table.csv"
> Fstfile   <- "RROI_elasticity_table.csv"
> 
> LTAMTA <- ifelse(toupper(inJsonData$lmTouch) == "LAST TOUCH", "_LTA", "_MTA")
> nMon <- as.numeric(inJsonData$PlanMonths)
> 
> Date     <- "Date"
> Beg_Date <- paste0(inJsonData$StartingTime, "-01")
> End_Date <- as.character((seq(as.Date(Beg_Date), length=nMon+1, by="month") - 1)[nMon+1])
> 
> #if (!substr(inJsonData$EndingTime, 1, 4) %in% c("2012", "2016", "2020") & substr(inJsonData$EndingTime, 6, 7)=="02") End_Date  <- paste0(inJsonData$EndingTime,  "-28")
> #if ( substr(inJsonData$EndingTime, 1, 4) %in% c("2012", "2016", "2020") & substr(inJsonData$EndingTime, 6, 7)=="02") End_Date  <- paste0(inJsonData$EndingTime,  "-29") #leap year
> #if ( substr(inJsonData$EndingTime, 6, 7) %in% c("04", "06", "09", "11"))                                             End_Date  <- paste0(inJsonData$EndingTime,  "-30")
> #if ( substr(inJsonData$EndingTime, 6, 7) %in% c("01", "03", "05", "07", "08", "10", "12"))                           End_Date  <- paste0(inJsonData$EndingTime,  "-31")
> 
> Beg_Date_LastYear <- paste0(year(as.Date(Beg_Date))-1, "-", month(as.Date(Beg_Date)), "-01")
> End_Date_LastYear <- as.character((seq(as.Date(Beg_Date_LastYear ), length=nMon+1, by="month") - 1)[nMon+1])
> 
> 
> 
> DATE <- as.Date(seq(from=as.Date(Beg_Date),to=as.Date(End_Date),by='day'))
> cmonth <- format(DATE,'%b')
> MONTH <- factor(cmonth,levels=unique(cmonth),ordered=TRUE)  #Jan, Feb, Mar, ...
> dayOfMonth =table(MONTH)	
> ndays = sum(dayOfMonth)
> 
> 
> DATE_LastYear <- as.Date(seq(from=as.Date(Beg_Date_LastYear),to=as.Date(End_Date_LastYear),by='day'))
> cmonth_LastYear <- format(DATE_LastYear,'%b')
> MONTH_LastYear <- factor(cmonth_LastYear,levels=unique(cmonth_LastYear),ordered=TRUE)  #Jan, Feb, Mar, ...
> dayOfMonth_LastYear =table(MONTH_LastYear)	
> ndays_LastYear = sum(dayOfMonth_LastYear)
> 
> ####### SEMCard SEMPBook SEMOther SEMBrand  Display   FB   Affiliate Partners DM  ###########
> ChannelSpend      <- c("SEMCard", "SEMPBook", "SEMOther", "SEMBrand", "Display",  "FB",  "Affiliate", "Partners")    
> ChannelOut        <- c("semC", "semP", "semO", "semB", "dis",  "soc",  "aff", "par")   
> ChannelOutTot     <- c("semC", "semP", "semO", "semB", "dis",  "soc",  "aff", "par", "tot")   
> ChannelSpend2     <- c("Display", "SEMBrand", "SEMCard", "SEMPBook", "SEMOther",  "Partners", "Affiliate", "FB") 
> OptChannel        <- c("dis", "semB", "semC", "semP", "semO",  "par",  "aff", "soc")
> OptChannelinChannelOut <- match(OptChannel, ChannelOut) # 5 4 1 2 3 8 7 6 
> ChannelOutinOptChannel <- match(ChannelOut, OptChannel) # 3 4 5 2 1 8 7 6 
> SRChannel         <- c("sem", "semC", "semP", "semO", "semB", "dis",  "soc",  "aff", "par", "tot")  
> PRChannel         <- c("sem", "dis",  "soc",  "aff", "par", "tot") 
> ASChannel         <- SRChannel
> ARChannel         <- PRChannel
> SF_cha            <- c("1.0", "1.0",  "1.0",   "1.0",    "1.0",    "1.0",  "1.0",   "1.0")
> RevRange          <- c(0.06, 0.11, 0.10, 0.10, 0.06, 0.08) #PR variance by LTA/MTA, planmonth  c(-0.0121, -0.0135, -0.0844, -0.0604, 0.0199, 0.0102)
>  
> 
> if (!exists("roDgt"))  roDgt <- 0
> 
> print(inJsonData[1:8])
$UserName
[1] ""

$Brand
[1] ""

$Spend
[1] "88888888"

$StartingTime
[1] "2014-1"

$PlanMonths
[1] "3"

$EndingTime
[1] "2014-3"

$lmTouch
[1] "Multi-Touch"

$Algorithm
[1] 2

> a<-cbind(LB=as.numeric(inJsonData[ paste0(ChannelOut, 'LB' )]),as.numeric(inJsonData[ paste0(ChannelOut, 'Min' )]), as.numeric(inJsonData[ paste0(ChannelOut, 'Max' )]), as.numeric(inJsonData[ paste0(ChannelOut, 'UB' )]))
> colnames(a) <- c('LB', 'Min', 'Max', 'UB')
> print(a)
         LB    Min      Max       UB
[1,] 299511 299511  4559712  4559712
[2,] 132746 132746  1542054  1542054
[3,]  80178  80178  3414455  3414455
[4,] 127358 127358  2095262  2095262
[5,] 445911 445911  9871816  9871816
[6,]  20775  20775  4030302  4030302
[7,]  49005  49005   861840   861840
[8,] 721755 721755 24307920 24307920
> print(colSums(a))
      LB      Min      Max       UB 
 1877239  1877239 50683361 50683361 
> 
> ###########################################################################################################################				
> ############################################## Run Run_0, Run_1, Run_2 ####################################################
> ###########################################################################################################################				
> 
> if (inJsonData$Algorithm == 0 || inJsonData$Algorithm==1) {
+ source("RROI_Run_0.R")
+ } else if (inJsonData$Algorithm==2) {
+ source("RROI_Run_1.R")
+ } else if (inJsonData$Algorithm==3) {
+ source("RROI_Run_2.R")
+ } else {
+ } # if inJsonData$Algorithm
############# Optimization Starts #################
Loading required package: Rsolnp
Loading required package: truncnorm
Loading required package: parallel
Loading required package: caTools
Loading required package: compiler
Loading required package: nloptr
[1] "The optimization does not converge!!! The solution is not reliable."
[1] 286695 219825 378572
MONTH
Jan Feb Mar 
 31  28  31 
[1] 90  8
[1] 90  8
[1] 1 1
[1] 720
[1] 721
[1] "Total Spend Last Year: $6,758,603"
[1] "Total Spend This Year: $6,891,562"
[1] "Total Budget: $88,888,888"
[1] "Total Opt Spend: $50,683,361"
[1] "Total Revenue Last Year: $75,865,278"
[1] "Total Revenue This Year: $86,899,007"
[1] "Total Opt Revenue: $526,284,498"
[1] "Total Revenue ROI: 505.63%"
   semSR   semCSR   semPSR   semOSR   semBSR    disSR    socSR    affSR 
11611483  4559712  1542054  3414455  2095262  9871816  4030302   861840 
   parSR    totSR 
24307920 88888888 
   semSR   semCSR   semPSR   semOSR   semBSR    disSR    socSR    affSR 
11611483  4559712  1542054  3414455  2095262  9871816  4030302   861840 
   parSR    totSR 
24307920 88888888 
############# Optimization Ends #################
############# Forecast Starts #################
Note: no visible binding for global variable 'AS' 
Note: no visible binding for global variable 'AS' 
Note: no visible binding for global variable 'AS' 
NULL
NULL
Error in `$<-.data.frame`(`*tmp*`, "revAdj", value = numeric(0)) : 
  replacement has 0 rows, data has 37
Calls: source ... SimModel4Forecast_singlechannel -> SimModel4Forecast -> $<- -> $<-.data.frame
In addition: Warning messages:
1: package 'Rsolnp' was built under R version 3.0.3 
2: package 'caTools' was built under R version 3.0.3 
3: package 'nloptr' was built under R version 3.0.3 
Execution halted
